using CMS.DocumentEngine;
using Disqus.Models;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

namespace Disqus.Services
{
    public interface IDisqusService
    {
        // Endpoints
        private static string BASE_URL = "https://disqus.com/api/3.0/";
        public static string THREAD_LISTING = BASE_URL + "forums/listThreads.json?forum={0}&api_secret={1}";
        public static string THREAD_CREATE = BASE_URL + "threads/create.json?forum={0}&title={1}&identifier={2}&api_secret={3}&url={4}";
        public static string POSTS_BY_THREAD = BASE_URL + "threads/listPosts.json?thread={0}&api_secret={1}";
        public static string USER_DETAILS = BASE_URL + "users/details.json?api_secret={0}";

        // Authentication
        public static string AUTH_COOKIE_TOKEN = "kx_disqus_token";
        public static string AUTH_COOKIE_NAME = "kx_disqus_un";
        public static string AUTH_URL = @"https://disqus.com/api/oauth/2.0/authorize/?
client_id={0}&
scope=read,write&
response_type=code&
redirect_uri={1}";

        public string UserToken { get; set; }

        public string UserName { get; set; }

        /// <summary>
        /// Returns the thread ID of an existing thread, or creates a new thread if one doesn't exist
        /// </summary>
        /// <param name="identifier">Thread identifier</param>
        /// <param name="node">Current page</param>
        /// <returns>A thread ID</returns>
        public abstract Task<string> GetThreadByIdentifier(string identifier, TreeNode node);

        /// <summary>
        /// Creates a new thread with the provided identifier, and returns the thread internal ID
        /// </summary>
        /// <param name="identifier">An arbitrary identifier</param>
        /// <returns>The response from the Disqus server</returns>
        public abstract Task<JObject> CreateThread(string identifier, string title, string pageUrl);

        public abstract Task<IEnumerable<DisqusPost>> GetThreadPosts(string threadId);

        public abstract Task<string> GetUserDetails();

        /// <summary>
        /// Makes a GET request to the provided URL. Automatically adds the 'access_token' parameter if
        /// <see cref="UserToken"/> is populated.
        /// </summary>
        /// <param name="url"></param>
        /// <returns></returns>
        public abstract Task<JObject> MakeRequest(string url);

        /// <summary>
        /// Makes a POST request to the provided URL with data. Automatically adds the 'access_token' parameter if
        /// <see cref="UserToken"/> is populated.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        public abstract Task<JObject> MakePost(string url, HttpContent data);

        public abstract bool IsAuthenticated();

        /// <summary>
        /// Returns Disqus' authentication endpoint with the required query string parameters
        /// </summary>
        /// <returns></returns>
        public abstract string GetAuthenticationUrl();

        /// <summary>
        /// Populates the required data for the POST to Disqus' token endpoint, after end-user approves access
        /// </summary>
        /// <param name="code">The code generated by Disqus for the current user</param>
        /// <returns></returns>
        public abstract HttpContent GetTokenPostData(string code);
    }
}
