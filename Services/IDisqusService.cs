using CMS.DocumentEngine;
using Disqus.Models;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

namespace Disqus.Services
{
    public interface IDisqusService
    {
        public DisqusCurrentUser CurrentUser { get; set; }

        /// <summary>
        /// Returns the thread ID of an existing thread, or creates a new thread if one doesn't exist
        /// </summary>
        /// <param name="identifier">Thread identifier</param>
        /// <param name="node">Current page</param>
        /// <returns>A thread ID</returns>
        public abstract Task<string> GetThreadIdByIdentifier(string identifier, TreeNode node);

        public abstract Task<DisqusThread> GetThread(string threadId);

        /// <summary>
        /// Creates a new thread with the provided identifier, and returns the thread internal ID
        /// </summary>
        /// <param name="identifier">An arbitrary identifier</param>
        /// <returns>The response from the Disqus server</returns>
        public abstract Task<JObject> CreateThread(string identifier, string title, string pageUrl);

        /// <summary>
        /// Gets a post and its children by parsing a thread's full post listing
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public abstract Task<DisqusPost> GetPost(string id);

        /// <summary>
        /// Gets a list of a post's children in a heirarchal view by recursively calling itself. Also sets
        /// <see cref="DisqusPost.ChildPosts"/> of all children found this way.
        /// </summary>
        /// <param name="post"></param>
        /// <param name="allPosts">All posts of a thread. Must be flat (non-hierarchical)</param>
        /// <param name="thread"></param>
        /// <returns>A list of the post's children</returns>
        public abstract List<DisqusPost> GetPostChildren(DisqusPost post, List<DisqusPost> allPosts, DisqusThread thread);

        public abstract Task<JObject> CreatePost(DisqusPost post);

        public abstract Task<JObject> UpdatePost(DisqusPost post);

        public abstract Task<JObject> DeletePost(string id);

        /// <summary>
        /// Submits a like or dislike to a post
        /// </summary>
        /// <param name="postId"></param>
        /// <param name="value">1 or -1 for like and dislike respectively</param>
        /// <returns></returns>
        public abstract Task<JObject> SubmitVote(string postId, int value);

        /// <summary>
        /// Returns a thread's posts in a hierarchical view
        /// </summary>
        /// <param name="threadId"></param>
        /// <returns></returns>
        public abstract Task<IEnumerable<DisqusPost>> GetThreadPosts(string threadId);

        public abstract Task<JObject> GetUserDetails(string userId);

        /// <summary>
        /// Makes a GET request to the provided URL. Automatically adds the 'access_token' parameter if
        /// <see cref="UserToken"/> is populated.
        /// </summary>
        /// <param name="url"></param>
        /// <returns></returns>
        public abstract Task<JObject> MakeGetRequest(string url);

        /// <summary>
        /// Makes a POST request to the provided URL with data. Automatically adds the 'access_token' parameter if
        /// <see cref="UserToken"/> is populated.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        public abstract Task<JObject> MakePostRequest(string url, List<KeyValuePair<string, string>> data);

        public abstract bool IsAuthenticated();

        /// <summary>
        /// Returns Disqus' authentication endpoint with the required query string parameters
        /// </summary>
        /// <returns></returns>
        public abstract string GetAuthenticationUrl();

        /// <summary>
        /// Populates the required data for the POST to Disqus' token endpoint, after end-user approves access
        /// </summary>
        /// <param name="code">The code generated by Disqus for the current user</param>
        /// <returns></returns>
        public abstract HttpContent GetTokenPostData(string code);
    }
}
