@using Disqus.Models
@model DisqusComponentViewModel

<link rel="stylesheet" href="/disqus.css" />
<script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
<link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script>
    function voteClick(sender) {

        var btn = $(sender);
        btn.prop('disabled', true);
        var id = btn.data('post-id');
        var isLike = btn.data('is-like');
        var container = $('#post_' + id);
        $.ajax({
            method: 'POST',
            url: '@Url.Action("VotePost", "Disqus")',
            data: {
                id: id,
                isLike: isLike
            }
        }).done(function (data, statusText, xhdr) {
            container.before(data);
            container.remove();
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
            btn.prop("disabled", false);
        });
    }

    // Called from DisqusController.SubmitPost after a post is edited/created
    function updatePost(response) {

        if (!response.success) {
            alert(response.message);
        }
        else {
            if (response.action === 'create') {

                console.log('create post ' + response.id);
                $.ajax({
                    method: 'POST',
                    url: '@Url.Action("GetPostBody", "Disqus")',
                    data: {
                        id: response.id
                    }
                }).done(function (data, statusText, xhdr) {

                    var container;
                    if (response.parent === '') {
                        // Not a reply. The first submit form has no id so add after that
                        container = $('#disqus_thread #post_reply_container_reply_');
                        // Clear the main post input
                        container.find('.ql-editor').html('');
                    }
                    else {
                        // Reply, add after the reply form for parent
                        container = $('#disqus_thread #post_reply_container_reply_' + response.parent);
                        // Collapse the reply container on parent
                        container.toggleClass('show');
                        // Clear the input on the parent's reply form
                        container.find('.ql-editor').html('');
                    }
                    container.after(data);
                }).fail(function (xhdr, statusText, errorText) {
                    alert(xhdr.responseText);
                });
            }
            else if (response.action === 'update') {

                console.log('update post ' + response.id);
                $.ajax({
                    method: 'POST',
                    url: '@Url.Action("GetPostBody", "Disqus")',
                    data: {
                        id: response.id
                    }
                }).done(function (data, statusText, xhdr) {

                    var container = $('#disqus_thread #post_' + response.id);
                    container.before(data);
                    container.remove();
                }).fail(function (xhdr, statusText, errorText) {
                    alert(xhdr.responseText);
                });
            }
        }
    }

    function reportPost() {
        // Get post id from modal data
        var id = $('#reportReasonModal').data('post-id');
        // TODO: Get report reason
        $.ajax({
            method: 'POST',
            url: '@Url.Action("ReportPost", "Disqus")',
            data: {
                id: id
            }
        }).done(function (data, statusText, xhdr) {
            
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
        });
    }

    // Called from a post's edit button
    function editPost(sender) {

        var btn = $(sender);
        btn.prop('disabled', true);
        var id = btn.data('post-id');
        var container = $('#post_' + id + '> .post-main');
        $.ajax({
            method: 'POST',
            url: '@Url.Action("EditPost", "Disqus")',
            data: {
                id: id
            }
        }).done(function (data, statusText, xhdr) {
            container.html(data);
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
            btn.prop("disabled", false);
        });
    }

    function cancelEdit(sender) {

        var btn = $(sender);
        btn.prop('disabled', true);
        var id = btn.data('post-id');
        $.ajax({
            method: 'POST',
            url: '@Url.Action("GetPostBody", "Disqus")',
            data: {
                id: id
            }
        }).done(function (data, statusText, xhdr) {

            var container = $('#disqus_thread #post_' + id);
            container.before(data);
            container.remove();
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
        });
    }

    // Called from a post's delete button
    function deletePost(sender) {

        if (confirm('Are you sure you want to delete this?')) {

            var btn = $(sender);
            btn.prop('disabled', true);
            var id = btn.data('post-id');
            $.ajax({
                method: 'POST',
                url: '@Url.Action("DeletePost", "Disqus")',
                data: {
                    id: id
                }
            }).done(function (data, statusText, xhdr) {
                var container = $('#disqus_thread #post_' + id);
                container.remove();
            }).fail(function (xhdr, statusText, errorText) {
                alert(xhdr.responseText);
                btn.prop("disabled", false);
            });
        }
    }

    function ajaxBegin() {
        $('#disqus_thread input[type=submit]').attr('disabled', true);
    }

    function ajaxComplete() {
        $('#disqus_thread input[type=submit]').attr('disabled', false);
    }
</script>

<div id="disqus_thread" class="container">
    <h1>@Model.Header</h1>

    @if (Model.Exception != null)
    {
        await Html.RenderPartialAsync("_DisqusException.cshtml", Model.Exception);
    }
    else
    {
        if (!Model.Thread.IsClosed)
        {
            await Html.RenderPartialAsync("_DisqusPostForm.cshtml", new DisqusPost()
            {
                Thread = Model.Thread.Id
            });
        }
        else
        {
            <p>This thread is closed.</p>
        }

        foreach (var post in Model.Posts.Where(p => string.IsNullOrEmpty(p.Parent)))
        {
            await Html.RenderPartialAsync("_DisqusPost.cshtml", post);
        }
    }
</div>

@{
    await Html.RenderPartialAsync("_DisqusReportReason.cshtml");
}
