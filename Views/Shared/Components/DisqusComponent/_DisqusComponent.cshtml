@using Disqus
@using Disqus.Models
@using Disqus.Services
@model DisqusComponentViewModel
@inject IDisqusService disqusService
@inject DisqusRepository disqusRepository

<link rel="stylesheet" href="/disqus.css" />
<script src="/disqus.js"></script>
<script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
<link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script>
    function initQuillEditor(replyingTo) {

        var mediaOptions = ['link'];
        if ('@Model.Forum.Settings.MediaEmbedEnabled' === 'True') {
            mediaOptions.push('image', 'video');
        }
        var quill = new window.Quill(`#form_replyto_${replyingTo} #editor`, {
            bounds: `#form_replyto_${replyingTo} #editor_container`,
            theme: 'snow',
            placeholder: `@Model.Thread.PlaceholderText`,
            modules: {
                toolbar: [
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'header': 1 }, { 'header': 2 }, 'blockquote'],
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'indent': '-1' }, { 'indent': '+1' }],
                    mediaOptions
                ]
            },
        });

        var message = $(`#form_replyto_${replyingTo} #Message`).val();
        const delta = quill.clipboard.convert(message);
        quill.setContents(delta, 'silent');

        // Update Message in form when Quill changes
        quill.on('text-change', function (delta, oldDelta, source) {
            var richText = quill.root.innerHTML;
            $(`#form_replyto_${replyingTo} #Message`).val(richText);
        });
    }

    $(document).ready(function () {
        var isSubscribed = ('@(Model.Thread.UserSubscription)' === 'True');
        setIsSubscribed(isSubscribed);

        var isRecommended = ('@(Model.Thread.UserScore == 1)' === 'True');
        setIsRecommended(isRecommended);

        initQuillEditor('');
    });
</script>

@functions { 
    async Task RenderChildren(string postId, int currentNestingLevel = 0)
    {
        currentNestingLevel += 1;
        var children = disqusRepository.GetDirectChildren(postId);
        foreach(var post in children)
        {
            post.NestingLevel = currentNestingLevel;
            await Html.RenderPartialAsync("_DisqusPost.cshtml", post);
            await RenderChildren(post.Id, currentNestingLevel);
        }
    }
}

<div id="disqus_thread">
    <span class="h3">@Model.Header</span>

    @if (!Model.Thread.IsClosed)
    {
        await Html.RenderPartialAsync("_DisqusPostForm.cshtml", new DisqusEditingFormModel()
        {
            PostThread = Model.Thread.Id,
            AllowAnon = Model.Forum.Settings.AllowAnonPost
        });
    }
    else
    {
        <p>This thread is closed.</p>
    }

    <div class="d-flex flex-row justify-content-end thread-options my-1">
        @if (disqusService.IsAuthenticated())
        {
            <div class="d-inline align-middle px-1">
                <span class="recommend-heart">&#10084;</span>
                <a class="recommend-link" onclick="javascript:recommendThread(this)" data-thread-id="@Model.Thread.Id" data-url="@Url.Action("RecommendThread", "Disqus")">Recommend</a>
            </div>
            <div class="d-inline align-middle px-1">
                <img src="/email.png" />
                <a class="subscribe-link" onclick="javascript:subscribeThread(this)" data-thread-id="@Model.Thread.Id" data-url="@Url.Action("SubscribeThread", "Disqus")">Subscribe</a>
            </div>
        }
        <div class="d-inline align-middle px-1">
            <img src="/rss.png" />
            <a href="@Model.Thread.Feed" target="_blank">RSS</a>
        </div>
    </div>
    
    @foreach (var post in Model.Posts)
    {
        await Html.RenderPartialAsync("_DisqusPost.cshtml", post);
        await RenderChildren(post.Id);
    }

    <div class="d-flex flex-row justify-content-between mt-3">
        @if (!string.IsNullOrEmpty(Model.Forum.CommentPolicyText))
        {
            <div class="comment-policy">
                <span>@Model.Thread.ForumObject.CommentPolicyText</span>
                @if (!string.IsNullOrEmpty(Model.Forum.CommentPolicyLink))
                {
                    <span>Please read our <a href="@Model.Forum.CommentPolicyLink" target="_blank">Comment Policy</a> before commenting.</span>
                }
            </div>
        }
        @if (!Model.Forum.DisableDisqusBranding)
        {
            <div class="powered-by-disqus align-middle">
                Powered by&nbsp;
                <a href="https://disqus.com">
                    <img class="disqus-logo" src="/disqus-logo.png" />
                </a>
            </div>
        }
    </div>
</div>

@{
    await Html.RenderPartialAsync("_DisqusReportReason.cshtml");
}
