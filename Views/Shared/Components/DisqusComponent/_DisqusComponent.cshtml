@using Disqus
@using Disqus.Models
@using Disqus.Services
@model DisqusComponentViewModel
@inject IDisqusService disqusService

<link rel="stylesheet" href="/disqus.css" />
<script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
<link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script>
function copyToClipboard(url) {
    var temp = $('<input>');
    $('body').append(temp);
    temp.val(url).select();
    document.execCommand('copy');
    temp.remove();
    alert('Comment permalink copied!');
}

// Called when a user's avatar is clicked
function showUser(id) {
    $.ajax({
        method: 'POST',
        url: '@Url.Action("GetUserDetailBody", "Disqus")',
        data: {
            id: id
        }
    }).done(function (data, statusText, xhdr) {
        $('#user_modal').remove();
        $('body').append(data);
        var modal = new bootstrap.Modal(document.getElementById('user_modal'));
        modal.show();
    }).fail(function (xhdr, statusText, errorText) {
        alert(xhdr.responseText);
    });
}

// Called from a post's upvote/downvote buttons
function voteClick(sender) {

    var btn = $(sender);
    var id = btn.data('post-id');
    var isLike = btn.data('is-like');
    var container = $('#post_' + id);
    btn.prop('disabled', true);
    $.ajax({
        method: 'POST',
        url: '@Url.Action("VotePost", "Disqus")',
        data: {
            id: id,
            isLike: isLike
        }
    }).done(function (data, statusText, xhdr) {
        container.before(data);
        container.remove();
    }).fail(function (xhdr, statusText, errorText) {
        alert(xhdr.responseText);
        btn.prop("disabled", false);
    });
}

// Called from _DisqusUserDetails.cshtml modal follow button
function followUser(sender) {

    var btn = $(sender);
    var id = btn.data('user-id');
    var isFollowing = btn.data('is-following');
    btn.prop('disabled', true);
    $.ajax({
        method: 'POST',
        url: '@Url.Action("FollowUser", "Disqus")',
        data: {
            id: id,
            doFollow: !isFollowing
        }
    }).done(function (data, statusText, xhdr) {
        setIsFollowing(!isFollowing);
    }).fail(function (xhdr, statusText, errorText) {
        alert(xhdr.responseText);
    });
}

// Alters the user modal follow button depending on whether the current user is following
function setIsFollowing(isFollowing) {
    if (isFollowing) {
        $('#user_modal .follow-button').prop('disabled', false)
            .html('&check; Following')
            .css('background-color', '#43b311')
            .data('is-following', true);
    }
    else {
        $('#user_modal .follow-button').prop('disabled', false)
            .html('Follow')
            .css('background-color', '#2e9fff')
            .data('is-following', false);
    }
}

// Called from DisqusController.SubmitPost after a post is edited/created
function updatePost(response) {

    if (!response.success) {
        alert(response.message);
    }
    else {
        if (response.action === @((int)DisqusConstants.DisqusAction.CREATE)) {

            $.ajax({
                method: 'POST',
                url: '@Url.Action("GetPostBody", "Disqus")',
                data: {
                    id: response.id
                }
            }).done(function (data, statusText, xhdr) {

                var container;
                if (response.parent === '') {
                    // Not a reply. The first submit form has no id so add after that
                    container = $('#disqus_thread #post_reply_container_reply_');
                    container.find('.ql-editor').html('');
                }
                else {
                    // Reply, add after the reply form for parent
                    container = $('#disqus_thread #post_reply_container_reply_' + response.parent);
                    container.toggleClass('show');
                    container.find('.ql-editor').html('');
                }
                container.after(data);
            }).fail(function (xhdr, statusText, errorText) {
                alert(xhdr.responseText);
            });
        }
        else if (response.action === @((int)DisqusConstants.DisqusAction.UPDATE)) {

            $.ajax({
                method: 'POST',
                url: '@Url.Action("GetPostBody", "Disqus")',
                data: {
                    id: response.id
                }
            }).done(function (data, statusText, xhdr) {

                var container = $('#disqus_thread #post_' + response.id);
                container.before(data);
                container.remove();
            }).fail(function (xhdr, statusText, errorText) {
                alert(xhdr.responseText);
            });
        }
    }
}

function reportPost(sender) {

    var btn = $(sender);
    var id = btn.data('post-id');
    var reason = $('#reportReasonModal input[name="report-reason"]:checked').val();
    $.ajax({
        method: 'POST',
        url: '@Url.Action("ReportPost", "Disqus")',
        data: {
            id: id,
            reason: reason
        }
    }).done(function (data, statusText, xhdr) {
        alert('Comment reported successfully.');
    }).fail(function (xhdr, statusText, errorText) {
        alert(xhdr.responseText);
    });
}

// Called from a post's edit button, gets editing form HTML
function editPost(sender) {

    var btn = $(sender);
    var id = btn.data('post-id');
    var container = $('#post_' + id + '_content');
    btn.prop('disabled', true);
    $.ajax({
        method: 'POST',
        url: '@Url.Action("EditPost", "Disqus")',
        data: {
            id: id
        }
    }).done(function (data, statusText, xhdr) {
        container.html(data);
    }).fail(function (xhdr, statusText, errorText) {
        alert(xhdr.responseText);
        btn.prop("disabled", false);
    });
}

function cancelEdit(sender) {

    var btn = $(sender);
    var id = btn.data('post-id');
    btn.prop('disabled', true);
    $.ajax({
        method: 'POST',
        url: '@Url.Action("GetPostBody", "Disqus")',
        data: {
            id: id
        }
    }).done(function (data, statusText, xhdr) {

        var container = $('#disqus_thread #post_' + id);
        container.before(data);
        container.remove();
    }).fail(function (xhdr, statusText, errorText) {
        alert(xhdr.responseText);
    });
}

function deletePost(sender) {

    if (confirm('Are you sure you want to delete this?')) {

        var btn = $(sender);
        var id = btn.data('post-id');
        btn.prop('disabled', true);
        $.ajax({
            method: 'POST',
            url: '@Url.Action("DeletePost", "Disqus")',
            data: {
                id: id
            }
        }).done(function (data, statusText, xhdr) {
            var container = $('#disqus_thread #post_' + id);
            container.remove();
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
            btn.prop("disabled", false);
        });
    }
}

function ajaxBegin() {
    $('#disqus_thread input[type=submit]').attr('disabled', true);
}

function ajaxComplete() {
    $('#disqus_thread input[type=submit]').attr('disabled', false);
}
</script>

<div id="disqus_thread">
    <span class="h2">@Model.Header</span>

    @if (Model.Exception != null)
    {
        await Html.RenderPartialAsync("_DisqusException.cshtml", Model.Exception);
    }
    else
    {
        if (!Model.Thread.IsClosed)
        {
            await Html.RenderPartialAsync("_DisqusPostForm.cshtml", new DisqusPost()
            {
                Thread = Model.Thread.Id,
                Forum = Model.Thread.Forum
            });
        }
        else
        {
            <p>This thread is closed.</p>
        }

        foreach (var post in Model.Posts.Where(p => string.IsNullOrEmpty(p.Parent)))
        {
            await Html.RenderPartialAsync("_DisqusPost.cshtml", post);
        }
    }
</div>

@{
    await Html.RenderPartialAsync("_DisqusReportReason.cshtml");
}
