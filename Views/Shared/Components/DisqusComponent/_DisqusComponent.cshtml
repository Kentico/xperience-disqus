@using Disqus
@using Disqus.Models
@using Disqus.Services
@model DisqusComponentViewModel
@inject IDisqusService disqusService

<link rel="stylesheet" href="/disqus.css" />
<script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
<link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script>
    function copyToClipboard(url) {
        var temp = $('<input>');
        $('body').append(temp);
        temp.val(url).select();
        document.execCommand('copy');
        temp.remove();
        alert('Comment permalink copied!');
    }

    // Called when a user's avatar is clicked
    function showUser(id) {
        $.ajax({
            method: 'POST',
            url: '@Url.Action("GetUserDetailBody", "Disqus")',
            data: {
                id: id
            }
        }).done(function (data, statusText, xhdr) {
            $('#user_modal').remove();
            $('body').append(data);
            var modal = new bootstrap.Modal(document.getElementById('user_modal'));
            modal.show();
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
        });
    }

    // Called from a post's upvote/downvote buttons
    function voteClick(sender) {

        var btn = $(sender);
        var id = btn.data('post-id');
        var isLike = btn.data('is-like');
        var container = $('#post_' + id);
        btn.prop('disabled', true);
        $.ajax({
            method: 'POST',
            url: '@Url.Action("VotePost", "Disqus")',
            data: {
                id: id,
                isLike: isLike
            }
        }).done(function (data, statusText, xhdr) {
            container.before(data);
            container.remove();
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
            btn.prop("disabled", false);
        });
    }

    function subscribeThread(sender) {
        var btn = $(sender);
        var id = btn.data('thread-id');
        var isSubscribed = btn.data('is-subscribed');
        btn.prop('disabled', true);
        $.ajax({
            method: 'POST',
            url: '@Url.Action("SubscribeThread", "Disqus")',
            data: {
                id: id,
                doSubscribe: !isSubscribed
            }
        }).done(function (data, statusText, xhdr) {
            setIsSubscribed(!isSubscribed);
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
        });
    }

    // Called from _DisqusUserDetails.cshtml modal follow button
    function followUser(sender) {

        var btn = $(sender);
        var id = btn.data('user-id');
        var isFollowing = btn.data('is-following');
        btn.prop('disabled', true);
        $.ajax({
            method: 'POST',
            url: '@Url.Action("FollowUser", "Disqus")',
            data: {
                id: id,
                doFollow: !isFollowing
            }
        }).done(function (data, statusText, xhdr) {
            setIsFollowing(!isFollowing);
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
        });
    }

    function recommendThread(sender) {
        var btn = $(sender);
        var id = btn.data('thread-id');
        var isRecommended = btn.data('is-recommended');
        btn.prop('disabled', true);
        $.ajax({
            method: 'POST',
            url: '@Url.Action("RecommendThread", "Disqus")',
            data: {
                id: id,
                doRecommend: !isRecommended
            }
        }).done(function (data, statusText, xhdr) {
            setIsRecommended(!isRecommended);
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
        });
    }

    // Called from DisqusController.SubmitPost after a post is edited/created
    function updatePost(response) {

        if (!response.success) {
            alert(response.message);
        }
        else {
            if (response.action === @((int)DisqusConstants.DisqusAction.CREATE)) {

                $.ajax({
                    method: 'POST',
                    url: '@Url.Action("GetPostBody", "Disqus")',
                    data: {
                        id: response.id
                    }
                }).done(function (data, statusText, xhdr) {

                    var container;
                    if (response.parent === '') {
                        // Not a reply, add after thread options
                        container = $('#disqus_thread .thread-options');
                        container.find('.ql-editor').html('');
                    }
                    else {
                        // Reply, add after the reply form for parent
                        container = $('#disqus_thread #post_reply_container_reply_' + response.parent);
                        container.toggleClass('show');
                        container.find('.ql-editor').html('');
                    }
                    container.after(data);
                }).fail(function (xhdr, statusText, errorText) {
                    alert(xhdr.responseText);
                });
            }
            else if (response.action === @((int)DisqusConstants.DisqusAction.UPDATE)) {

                $.ajax({
                    method: 'POST',
                    url: '@Url.Action("GetPostBody", "Disqus")',
                    data: {
                        id: response.id
                    }
                }).done(function (data, statusText, xhdr) {

                    var container = $('#disqus_thread #post_' + response.id);
                    container.before(data);
                    container.remove();
                }).fail(function (xhdr, statusText, errorText) {
                    alert(xhdr.responseText);
                });
            }
        }
    }

    function reportPost(sender) {

        var btn = $(sender);
        var id = btn.data('post-id');
        var reason = $('#reportReasonModal input[name="report-reason"]:checked').val();
        $.ajax({
            method: 'POST',
            url: '@Url.Action("ReportPost", "Disqus")',
            data: {
                id: id,
                reason: reason
            }
        }).done(function (data, statusText, xhdr) {
            alert('Comment reported successfully.');
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
        });
    }

    // Called from a post's edit button, gets editing form HTML
    function editPost(sender) {

        var btn = $(sender);
        var id = btn.data('post-id');
        var container = $('#post_' + id + '_content');
        btn.prop('disabled', true);
        $.ajax({
            method: 'POST',
            url: '@Url.Action("EditPost", "Disqus")',
            data: {
                id: id
            }
        }).done(function (data, statusText, xhdr) {
            container.html(data);
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
            btn.prop("disabled", false);
        });
    }

    function cancelEdit(sender) {

        var btn = $(sender);
        var id = btn.data('post-id');
        btn.prop('disabled', true);
        $.ajax({
            method: 'POST',
            url: '@Url.Action("GetPostBody", "Disqus")',
            data: {
                id: id
            }
        }).done(function (data, statusText, xhdr) {

            var container = $('#disqus_thread #post_' + id);
            container.before(data);
            container.remove();
        }).fail(function (xhdr, statusText, errorText) {
            alert(xhdr.responseText);
        });
    }

    function deletePost(sender) {

        if (confirm('Are you sure you want to delete this?')) {

            var btn = $(sender);
            var id = btn.data('post-id');
            btn.prop('disabled', true);
            $.ajax({
                method: 'POST',
                url: '@Url.Action("DeletePost", "Disqus")',
                data: {
                    id: id
                }
            }).done(function (data, statusText, xhdr) {
                var container = $('#disqus_thread #post_' + id);
                container.remove();
            }).fail(function (xhdr, statusText, errorText) {
                alert(xhdr.responseText);
                btn.prop("disabled", false);
            });
        }
    }

    // Changes the recommend heart color if the current user has voted positively on the thread
    function setIsRecommended(isRecommended) {
        var icon = $('#disqus_thread .recommend-heart');
        var link = $('#disqus_thread .recommend-link');
        link.data('is-recommended', isRecommended);
        icon.toggleClass('recommended', isRecommended);

        if (isRecommended) {
            link.html('Recommended');
        }
        else {
            link.html('Recommend');
        }
    }

    // Alters the user modal follow button depending on whether the current user is following
    function setIsFollowing(isFollowing) {
        var link = $('#user_modal .follow-button');
        link.prop('disabled', false)
            .data('is-following', isFollowing);

        if (isFollowing) {
            link.html('&check; Following')
                .css('background-color', '#43b311');

        }
        else {
            link.html('Follow')
                .css('background-color', '#2e9fff');
        }
    }

    // Changes the subscription text if the current user is subscribed to the thread
    function setIsSubscribed(isSubscribed) {
        var link = $('#disqus_thread .subscribe-link');
        link.prop('disabled', false)
            .data('is-subscribed', isSubscribed);

        if (isSubscribed) {
            link.html('Unsubscribe');
        }
        else {
            link.html('Subscribe');
        }
    }
</script>

<script>
    $(document).ready(function () {
        var isSubscribed = ('@(Model.Thread.UserSubscription)' === 'True');
        setIsSubscribed(isSubscribed);

        var isRecommended = ('@(Model.Thread.UserScore == 1)' === 'True');
        setIsRecommended(isRecommended);
    });
</script>
<div id="disqus_thread">
    <span class="h3">@Model.Header</span>

    @if (!Model.Thread.IsClosed)
    {
        await Html.RenderPartialAsync("_DisqusPostForm.cshtml", new DisqusPost()
        {
            Thread = Model.Thread.Id,
            Forum = Model.Thread.Forum,
            NodeID = Model.NodeID
        });
    }
    else
    {
        <p>This thread is closed.</p>
    }

    <div class="d-flex flex-row justify-content-end thread-options my-1">
        @if (disqusService.IsAuthenticated())
        {
            <div class="d-inline align-middle px-1">
                <span class="recommend-heart">&#10084;</span>
                <a class="recommend-link" onclick="javascript:recommendThread(this)" data-thread-id="@Model.Thread.Id">Recommend</a>
            </div>
            <div class="d-inline align-middle px-1">
                <img src="/email.png" />
                <a class="subscribe-link" onclick="javascript:subscribeThread(this)" data-thread-id="@Model.Thread.Id">Subscribe</a>
            </div>
        }
        <div class="d-inline align-middle px-1">
            <img src="/rss.png" />
            <a href="@Model.Thread.Feed" target="_blank">RSS</a>
        </div>
    </div>
    @foreach (var post in Model.Posts)
    {
        await Html.RenderPartialAsync("_DisqusPost.cshtml", post);
    }

    <div class="d-flex flex-row justify-content-between">
        @if (!string.IsNullOrEmpty(Model.Forum.CommentPolicyText))
        {
            <div class="comment-policy">
                <span>@Model.Thread.ForumObject.CommentPolicyText</span>
                @if (!string.IsNullOrEmpty(Model.Forum.CommentPolicyLink))
                {
                    <span>Please read our <a href="@Model.Forum.CommentPolicyLink" target="_blank">Comment Policy</a> before commenting.</span>
                }
            </div>
        }
        @if (!Model.Forum.DisableDisqusBranding)
        {
            <div class="powered-by-disqus align-middle">
                Powered by&nbsp;
                <a href="https://disqus.com">
                    <img class="disqus-logo" src="/disqus-logo.png" />
                </a>
            </div>
        }
    </div>
</div>

@{
    await Html.RenderPartialAsync("_DisqusReportReason.cshtml");
}
